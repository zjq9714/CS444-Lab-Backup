Q: What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
We cannot protect the whole program from exceptions/interrupts. In current implementation, we can only the individual functions .

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?
We should set the dpl to 3 to allow users invoke int $14. If the kernel allows int $14 to invoke the kernel’s page fault handler, the kernel will be in trouble. 

3.The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?
We can set the dpl to enable user-invoking.

4.What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
The main point of these mechanisms is Protection. so that user cannot access kernel space memory or any other resources that they are not supposed to.  